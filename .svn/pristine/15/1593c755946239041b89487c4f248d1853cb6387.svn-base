# search.py
# ---------
# Licensing Information: Please do not distribute or publish solutions to this
# project. You are free to use and extend these projects for educational
# purposes. The Pacman AI projects were developed at UC Berkeley, primarily by
# John DeNero (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# For more info, see http://inst.eecs.berkeley.edu/~cs188/sp09/pacman.html

"""
In search.py, you will implement generic search algorithms which are called
by Pacman agents (in searchAgents.py).
"""

import util

class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples,
        (successor, action, stepCost), where 'successor' is a
        successor to the current state, 'action' is the action
        required to get there, and 'stepCost' is the incremental
        cost of expanding to that successor
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.  The sequence must
        be composed of legal moves
        """
        util.raiseNotDefined()


def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other
    maze, the sequence of moves will be incorrect, so only use this for tinyMaze
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return  [s,s,w,s,w,w,s,w]

def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first
    [2nd Edition: p 75, 3rd Edition: p 87]

    Your search algorithm needs to return a list of actions that reaches
    the goal.  Make sure to implement a graph search algorithm
    [2nd Edition: Fig. 3.18, 3rd Edition: Fig 3.7].

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print "Start:", problem.getStartState()
    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    print "Start's successors:", problem.getSuccessors(problem.getStartState())
    """
    "*** YOUR CODE HERE ***"
    fringe = util.Stack()
    explored = util.Stack()
    solution = util.Queue()
    parents = {}
    flag = True
    start = problem.getStartState()
    fringe.push(start)
    while flag:
        if fringe.isEmpty():
            return 0
        node = fringe.pop()
        explored.push(node)
        successors = problem.getSuccessors(node)
        for (nextNode, move,  cost) in successors:
            if nextNode not in explored.list and nextNode not in fringe.list:
                if problem.isGoalState(nextNode):
                    flag = False
                    target = nextNode
                fringe.push(nextNode)
                parents[nextNode] = node, move
    while target!=start:
        solution.push(parents[target][1])
        target = parents[target][0]
    return solution.list
    #util.raiseNotDefined()

def breadthFirstSearch(problem):
    """
    Search the shallowest nodes in the search tree first.
    [2nd Edition: p 73, 3rd Edition: p 82]
    """
    "*** YOUR CODE HERE ***"
    frontier = util.Queue()
    explored = util.Stack()
    solution = util.Queue()
    parents = {}
    start = problem.getStartState()
    frontier.push(start)
    if problem.isGoalState(start):
        return solution.list
    flag = True
    while flag:
        if frontier.isEmpty():
            return 0
        node = frontier.pop()
        explored.push(node)
        successors = problem.getSuccessors(node)
        for (nextNode, move, cost) in successors:
            if (nextNode not in frontier.list) and (nextNode not in explored.list):
                if problem.isGoalState(nextNode):
                    flag = False
                    target = nextNode
                frontier.push(nextNode)
                parents[nextNode] = node, move
    while target!=start:
        solution.push(parents[target][1])
        target = parents[target][0]
    return solution.list
    #util.raiseNotDefined()

def uniformCostSearch(problem):
    "Search the node of least total cost first. "
    "*** YOUR CODE HERE ***"
    frontier = util.PriorityQueue()
    pathCost = util.PriorityQueue()
    explored = util.Stack()
    solution = util.Queue()
    parents = {}
    tempCost = []
    tempState = []
    flag = True
    start = problem.getStartState()
    frontier.push(start, 0)
    pathCost.push(0, 0)
    while flag:
        if frontier.isEmpty():
            return 0
        node = frontier.pop()
        preCost = pathCost.pop()
        if problem.isGoalState(node):
            target = node
            flag = False
        explored.push(node)
        successors = problem.getSuccessors(node)
        for (nextNode, move, cost) in successors:
            for (totalCost,state) in frontier.heap:
                tempCost.append(totalCost)
                tempState.append(state)
            if nextNode not in tempState and nextNode not in explored.list:
                frontier.push(nextNode, preCost + cost)
                pathCost.push(preCost + cost, preCost + cost)
                parents[nextNode] = node, move
            if nextNode in tempState and preCost + cost < tempCost[tempState.index(nextNode)]:
                tempCost[tempState.index(nextNode)] = preCost + cost
                for i in range(0,len(frontier.heap)):
                    frontier.heap[i] = (tempCost[i], tempState[i])
    print target
    while target != start:
        solution.push(parents[target][1])
        target = parents[target][0]
    return solution.list
    #util.raiseNotDefined()

def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

def aStarSearch(problem, heuristic=nullHeuristic):
    "Search the node that has the lowest combined cost and heuristic first."
    "*** YOUR CODE HERE ***"
    frontier = util.PriorityQueue()
    pathCost = util.PriorityQueue()
    explored = util.Stack()
    solution = util.Queue()
    parents = {}
    gn = {}
    fn = {}
    tempCost = []
    tempState = []
    flag = True

    start = problem.getStartState()
    f[start] = heuristic(start,problem)
    g[start] = 0
    cost = f[start] + g[start]
    frontier.push(start, cost)
    pathCost.push(cost, cost)

    while flag:
        if frontier.isEmpty():
            return 0
        node = frontier.pop()
        f[node] = heuristic(node, problem)
        preCost = pathCost.pop()
        preCost = preCost - f[node]
        if problem.isGoalState(node):
            target = node
            flag = False
        explored.push(node)
        successors = problem.getSuccessors(node)
        for (nextNode, move, toCost) in successors:
            for (totalCost, state) in frontier.heap:
                tempCost.append(totalCost)
                tempState.append(state)
            if nextNode not in tempState and nextNode not in explored.list:
                frontier.push(nextNode, preCost + toCost)
                pathCost.push(preCost + toCost, preCost + toCost)
                parents[nextNode] = node, move
            if nextNode in tempState and preCost + toCost < tempCost[tempState.index(nextNode)]:
                tempCost[tempState.index(nextNode)] = preCost + toCost
                for i in range(0, len(frontier.heap)):
                    frontier.heap[i] = (tempCost[i], tempState[i])

    #util.raiseNotDefined()


# Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch

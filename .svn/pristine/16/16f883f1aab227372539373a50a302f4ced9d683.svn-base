# search.py
# ---------
# Licensing Information: Please do not distribute or publish solutions to this
# project. You are free to use and extend these projects for educational
# purposes. The Pacman AI projects were developed at UC Berkeley, primarily by
# John DeNero (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# For more info, see http://inst.eecs.berkeley.edu/~cs188/sp09/pacman.html

"""
In search.py, you will implement generic search algorithms which are called
by Pacman agents (in searchAgents.py).
"""

import util

class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples,
        (successor, action, stepCost), where 'successor' is a
        successor to the current state, 'action' is the action
        required to get there, and 'stepCost' is the incremental
        cost of expanding to that successor
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.  The sequence must
        be composed of legal moves
        """
        util.raiseNotDefined()


def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other
    maze, the sequence of moves will be incorrect, so only use this for tinyMaze
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return  [s,s,w,s,w,w,s,w]

def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first
    [2nd Edition: p 75, 3rd Edition: p 87]

    Your search algorithm needs to return a list of actions that reaches
    the goal.  Make sure to implement a graph search algorithm
    [2nd Edition: Fig. 3.18, 3rd Edition: Fig 3.7].

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print "Start:", problem.getStartState()
    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    print "Start's successors:", problem.getSuccessors(problem.getStartState())
    """
    "*** YOUR CODE HERE ***"
    fringe = util.Stack()
    visited = util.Stack()
    path = util.Stack()
    solution = util.Stack()

    node = problem.getStartState()
    visited.push(node)
    successors = problem.getSuccessors(node)
    for i in successors:
        fringe.push(i)
    node = fringe.pop()
    goalFlag = False
    if problem.isGoalState(node[0]):
        goalFlag = True

    while goalFlag is False:
        path.push(node)
        if node[0] not in visited.list:
            visited.push(node[0])
        successors = problem.getSuccessors(node[0])
        if problem.isGoalState(node[0]):   # is goal
            goalFlag = True
        elif len(successors) == 0:  # not goal, don't have successors
            visited.push(fringe.pop()[0])
        else:   # not goal, have successors
            if len(successors) != 0:
                for i in successors:    # in successors, not yet visited
                    if  i[0] not in visited.list: #i[0] not in fringe and
                        fringe.push(i)
                visitFlag = False
                for i in successors:
                    if i[0] not in visited.list:
                        visitFlag = True
                if visitFlag is False:   # all the successors are visited
                    popFlag = True
                    while popFlag is True:
                        if len(path.list) == 0:
                            node = fringe.list[-1]
                        else:
                            node = path.list[-1]
                        successors = problem.getSuccessors(node[0])
                        for i in successors:
                            if i[0] not in visited.list:
                                popFlag = False
                        if popFlag is True:
                            path.pop()
        node = fringe.pop()
    for i in path.list:
        solution.push(i[1])
    return solution.list
    #util.raiseNotDefined()





def breadthFirstSearch(problem):
    """
    Search the shallowest nodes in the search tree first.
    [2nd Edition: p 73, 3rd Edition: p 82]
    """
    "*** YOUR CODE HERE ***"
    solution = util.Queue()
    frontier = util.Queue()
    explored = util.Stack()
    exploredPos = util.Stack()
    frontierPos = util.Stack()
    goalFlag = False

    start = problem.getStartState()
    if problem.isGoalState(start):
        return solution

    frontier.push(start)
    node = frontier.pop()

    successors = problem.getSuccessors(node)
    for i in successors:
        if i not in frontier.list or i not in explored.list:
            if problem.isGoalState(i[0]):
                goalFlag = True
            else:
                frontier.push(i)
                frontierPos.push(i[0])
    count = 1
    while goalFlag is False:
        node = frontier.pop()
        exploredPos.push(node[0])
        explored.push(node)
        successors = problem.getSuccessors(node[0])
        for i in successors:
            if i[0] not in frontierPos.list and i[0] not in exploredPos.list:
                if problem.isGoalState(i[0]):
                    result = i
                    goalFlag = True
                else:
                    frontier.push(i)
                    frontierPos.push(i[0])
    #print explored
    #print result
    previous = result[0]
    x = -1
    y = -1
    while previous != start:
        solution.push(result[1])
        if result[1] == 'West':
            x = result[0][0] + 1
            y = result[0][1]
        if result[1] == 'South':
            x = result[0][0]
            y = result[0][1] + 1
        if result[1] == 'East':
            x = result[0][0] - 1
            y = result[0][1]
        if result[1] == 'North':
            x = result[0][0]
            y = result[0][1] - 1
        previous = (x,y)
        #print previous
        for i in explored.list:
            if i[0] == previous:
                result = i
         #       print result
                break
    #print "solution:", solution
    return solution.list
    #util.raiseNotDefined()

def uniformCostSearch(problem):
    "Search the node of least total cost first. "
    "*** YOUR CODE HERE ***"

    frontier = util.PriorityQueue()
    explored = util.Stack()
    solution = util.Queue()
    exploredPos = util.Stack()
    frontierPos = util.Stack()
    costStack = util.PriorityQueue()

    goalFlag = False

    start = problem.getStartState()
    if problem.isGoalState(start):
        return solution

    frontier.push(start, 0)
    costStack.push(0,0)
    node = frontier.pop()
    cost = costStack.pop()

    successors = problem.getSuccessors(node)
    for i in successors:
        if i[0] not in frontierPos.list or i[0] not in exploredPos.list:
            if problem.isGoalState(i[0]):
                result = i
                goalFlag = True
            else:
                frontier.push(i, i[2] + cost)
                frontierPos.push(i[0])
                costStack.push(i[2] + cost, i[2] + cost)

    while goalFlag is False:
        node = frontier.pop()
        cost = costStack.pop()

        if problem.isGoalState(node[0]):
            result = node
            goalFlag = True

        exploredPos.push(node[0])
        explored.push(node)

        successors = problem.getSuccessors(node[0])
        for i in successors:
            if i[0] not in frontierPos.list and i[0] not in exploredPos.list:
                frontier.push(i, i[2] + cost)
                frontierPos.push(i[0])
                costStack.push(i[2] + cost, i[2] + cost)
            else:
                for j in range(0,len(frontier.heap)):
                    if frontier.heap[j][1][0] == i[0] and i[2] + cost < frontier.heap[j][1][2]:
                        print i
                        temp = (i[2] + cost, i)
                        frontier.heap[j] = temp
    #print frontier.heap
    #return []
    print result
    previous = result[0]
    x = -1
    y = -1
    while previous != start:
        solution.push(result[-2])
        if result[-2] == 'West':
            x = result[0][0] + 1
            y = result[0][1]
        if result[-2] == 'South':
            x = result[0][0]
            y = result[0][1] + 1
        if result[-2] == 'East':
            x = result[0][0] - 1
            y = result[0][1]
        if result[-2] == 'North':
            x = result[0][0]
            y = result[0][1] - 1
        previous = (x, y)
        # print previous
        for i in explored.list:
            if i[0] == previous:
                result = i
                #       print result
                break
    # print "solution:", solution
    #print explored.list
    return solution.list
    #return []
    #util.raiseNotDefined()

def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

def aStarSearch(problem, heuristic=nullHeuristic):
    "Search the node that has the lowest combined cost and heuristic first."
    "*** YOUR CODE HERE ***"
    util.raiseNotDefined()


# Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch
"""
l = util.PriorityQueue()
l.push((1,2),3)
l.push((1,2),4)
for i in range(0,len(l.heap)):
    if l.heap[i][0] == 3:
        j = (l.heap[i][1],7)
        l.heap[i] = j
#l.heap[0] = ((1,2),7)
print l.heap
"""
# search.py
# ---------
# Licensing Information: Please do not distribute or publish solutions to this
# project. You are free to use and extend these projects for educational
# purposes. The Pacman AI projects were developed at UC Berkeley, primarily by
# John DeNero (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# For more info, see http://inst.eecs.berkeley.edu/~cs188/sp09/pacman.html

"""
In search.py, you will implement generic search algorithms which are called
by Pacman agents (in searchAgents.py).
"""

import util

class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples,
        (successor, action, stepCost), where 'successor' is a
        successor to the current state, 'action' is the action
        required to get there, and 'stepCost' is the incremental
        cost of expanding to that successor
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.  The sequence must
        be composed of legal moves
        """
        util.raiseNotDefined()


def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other
    maze, the sequence of moves will be incorrect, so only use this for tinyMaze
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return  [s,s,w,s,w,w,s,w]

def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first
    [2nd Edition: p 75, 3rd Edition: p 87]

    Your search algorithm needs to return a list of actions that reaches
    the goal.  Make sure to implement a graph search algorithm
    [2nd Edition: Fig. 3.18, 3rd Edition: Fig 3.7].

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print "Start:", problem.getStartState()
    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    print "Start's successors:", problem.getSuccessors(problem.getStartState())
    """
    "*** YOUR CODE HERE ***"
    fringe = util.Stack()
    explored = util.Stack()
    solution = util.Queue()
    parents = {}
    flag = True
    start = problem.getStartState()
    fringe.push(start)
    while flag:
        if fringe.isEmpty():
            return 0
        node = fringe.pop()
        explored.push(node)
        successors = problem.getSuccessors(node)
        for (nextNode, move,  cost) in successors:
            if nextNode not in explored.list and nextNode not in fringe.list:
                if problem.isGoalState(nextNode):
                    flag = False
                    target = nextNode
                fringe.push(nextNode)
                parents[nextNode] = node, move
    while target!=start:
        solution.push(parents[target][1])
        target = parents[target][0]
    return solution.list
    #util.raiseNotDefined()

def breadthFirstSearch(problem):
    """
    Search the shallowest nodes in the search tree first.
    [2nd Edition: p 73, 3rd Edition: p 82]
    """
    "*** YOUR CODE HERE ***"
    frontier = util.Queue()
    frontierPos = util.Queue()
    explored = {}
    parents = {}
    solution = []

    start = problem.getStartState()
    successors = problem.getSuccessors(start)
    for (nextNode, move, cost) in successors:
        frontier.push((nextNode, move, cost))
        frontierPos.push(nextNode)
        explored[nextNode] = move
        parents[nextNode] = start
    explored[start] = start

    if problem.isGoalState(start):
        return solution
    flag = False
    while flag is False:
        (node, action, cost) = frontier.pop()
        frontierPos.pop()
        explored[node] = action
        successors = problem.getSuccessors(node)
        for (nextNode, move, stepCost) in successors:
            if nextNode not in explored and nextNode not in frontierPos.list:
                if problem.isGoalState(nextNode):
                    target = nextNode
                    parents[nextNode] = node
                    explored[nextNode] = move
                    flag = True
                frontier.push((nextNode, move, stepCost))
                frontierPos.push(nextNode)
                parents[nextNode] = node
    while target != start:
        solution.insert(0, explored[target])
        target = parents[target]
    return solution
    #util.raiseNotDefined()

def uniformCostSearch(problem):
    "Search the node of least total cost first. "
    "*** YOUR CODE HERE ***"
    frontier = util.PriorityQueue()
    explored = {}
    parents = {}
    pathCost = {}
    solution = []

    start = problem.getStartState()

    successors = problem.getSuccessors(start)
    for (node, action, cost) in successors:
        frontier.push((node, action), cost)
        pathCost[node] = cost
        parents[node] = start
    explored[start] = ''
    pathCost[start] = 0

    while frontier.isEmpty() is False:
        (node, action)= frontier.pop()
        if node not in explored:
            explored[node] = action
            if problem.isGoalState(node):
                target = node
                break
            successors = problem.getSuccessors(node)
            for (nextNode, move, stepCost) in successors:
                if nextNode not in explored:
                    frontier.push((nextNode,move),pathCost[node]+stepCost)
                    pathCost[nextNode] = pathCost[node]+stepCost
                    parents[nextNode] = node

    while target != start:
        solution.insert(0, explored[target])
        target = parents[target]
    return solution
    #util.raiseNotDefined()

def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

def aStarSearch(problem, heuristic=nullHeuristic):
    "Search the node that has the lowest combined cost and heuristic first."
    "*** YOUR CODE HERE ***"
    from util import PriorityQueue

    state_visited = {}
    state_parent = {}
    cost_cur = {}  # this can be removed if the PQ returns the priority, but they don't, no worse code !
    PQ_ucs = PriorityQueue()

    state_cur = problem.getStartState()
    successors = problem.getSuccessors(state_cur)
    for (successor, action, stepCost) in successors:
        PQ_ucs.push(item=(successor, action), priority=stepCost + heuristic(successor, problem))
        cost_cur[successor] = stepCost
        state_parent[(successor, action)] = state_cur

    state_visited[state_cur] = 1
    cost_cur[state_cur] = 0

    while PQ_ucs.isEmpty() != True:
        (state_cur, action_cur) = PQ_ucs.pop()
        # IMPORTANT!!
        if state_cur in state_visited:
            continue
        state_visited[state_cur] = action_cur
        if problem.isGoalState(state_cur):
            break

        successors = problem.getSuccessors(state_cur)
        for (successor, action, stepCost) in successors:
            if successor in state_visited:
                continue
            PQ_ucs.push(item=(successor, action),
                        priority=(cost_cur[state_cur] + stepCost) + heuristic(successor, problem))
            cost_cur[successor] = cost_cur[state_cur] + stepCost
            state_parent[(successor, action)] = state_cur

    actions = []
    while state_cur != problem.getStartState():
        action = state_visited[state_cur]
        actions.insert(0, action)
        state_cur = state_parent[(state_cur, action)]
        # We use (state_cur, action) as the key of state_parent because if only state_cur is used,
        # then it will be in a mess when there are 2
        # identical position in the PQ

    return actions
    """frontier = util.PriorityQueue()
    explored = {}
    parents = {}
    pathCost = {}
    solution = []

    start = problem.getStartState()

    successors = problem.getSuccessors(start)
    for (node, action, cost) in successors:
        frontier.push((node, action), cost + heuristic(node,problem))
        pathCost[node] = cost
        parents[node] = start
    explored[start] = ''
    pathCost[start] = 0

    while frontier.isEmpty() is False:
        (node, action) = frontier.pop()
        if node not in explored:
            explored[node] = action
            if problem.isGoalState(node):
                target = node
                break
            successors = problem.getSuccessors(node)
            for (nextNode, move, stepCost) in successors:
                if nextNode not in explored:
                    frontier.push((nextNode, move), (pathCost[node] + stepCost + heuristic(node,problem)))
                    pathCost[nextNode] = pathCost[node] + stepCost
                    parents[nextNode] = node

    while target != start:
        solution.insert(0, explored[target])
        target = parents[target]
    return solution"""
    #util.raiseNotDefined()


# Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch
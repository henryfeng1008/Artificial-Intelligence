# search.py
# ---------
# Licensing Information: Please do not distribute or publish solutions to this
# project. You are free to use and extend these projects for educational
# purposes. The Pacman AI projects were developed at UC Berkeley, primarily by
# John DeNero (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# For more info, see http://inst.eecs.berkeley.edu/~cs188/sp09/pacman.html

"""
In search.py, you will implement generic search algorithms which are called
by Pacman agents (in searchAgents.py).
"""

import util

class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples,
        (successor, action, stepCost), where 'successor' is a
        successor to the current state, 'action' is the action
        required to get there, and 'stepCost' is the incremental
        cost of expanding to that successor
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.  The sequence must
        be composed of legal moves
        """
        util.raiseNotDefined()


def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other
    maze, the sequence of moves will be incorrect, so only use this for tinyMaze
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return  [s,s,w,s,w,w,s,w]

def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first
    [2nd Edition: p 75, 3rd Edition: p 87]

    Your search algorithm needs to return a list of actions that reaches
    the goal.  Make sure to implement a graph search algorithm
    [2nd Edition: Fig. 3.18, 3rd Edition: Fig 3.7].

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print "Start:", problem.getStartState()
    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    print "Start's successors:", problem.getSuccessors(problem.getStartState())
    """
    "*** YOUR CODE HERE ***"
    fringe = []
    visited = []
    path = []
    solution = []
    node = problem.getStartState()
    visited.append(node)
    successors = problem.getSuccessors(node)
    for i in successors:
        fringe.append(i)
    node = fringe.pop()
    goalFlag = False
    if problem.isGoalState(node[0]):
        goalFlag = True

    while goalFlag is False:
        #print " "
        #print node
        path.append(node)
        #print "path:",path
        #print "fringe:",fringe
        if node[0] not in visited:
            visited.append(node[0])
            #solution.append(i)
        successors = problem.getSuccessors(node[0])
        if problem.isGoalState(node[0]):   # is goal
            goalFlag = True
            #print "is goal"
        elif len(successors) == 0:  # not goal, don't have successors
            #print "not goal, don't have successors"
            visited.append(fringe.pop()[0])
        else:   # not goal, have successors
            if len(successors) != 0:
                #print "not goal, no successors"
                #print "not goal, have successors"
                #print "successors:"
                for i in successors:    # in successors, not yet visited
                    if  i[0] not in visited: #i[0] not in fringe and
                 #       print "not yet visited",i[0]
                        fringe.append(i)
                     #   print"move:",i

                visitFlag = False
                for i in successors:
                    if i[0] not in visited:
                        visitFlag = True
                if visitFlag is False:   # all the successors are visited
                    #print "all the successors are visited, need pop"
                    popFlag = True
                    #print"path:",path
                    while popFlag is True:
                        #print"before pop:",path
                        if len(path) == 0:
                            node = fringe[-1]
                        else:
                            node = path[-1]
                        successors = problem.getSuccessors(node[0])
                        for i in successors:
                            if i[0] not in visited:
                                popFlag = False
                        if popFlag is True:
                            path.pop()


                        #print "solution:", solution
                        #print "path:", path
                    #solution.append(last)
                    #visited.append(fringe.pop())
        node = fringe.pop()
        #print "fringe:",fringe
        #print "visited:",visited
     #   print "solution:",solution
        #print "visited:",visited
        #print "fringe:",fringe
    #print "path:", path
    for i in path:
        solution.append(i[1])
    #print "solution:", solution
    return solution
    #util.raiseNotDefined()





def breadthFirstSearch(problem):
    """
    Search the shallowest nodes in the search tree first.
    [2nd Edition: p 73, 3rd Edition: p 82]
    """
    "*** YOUR CODE HERE ***"
    util.raiseNotDefined()

def uniformCostSearch(problem):
    "Search the node of least total cost first. "
    "*** YOUR CODE HERE ***"
    util.raiseNotDefined()

def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

def aStarSearch(problem, heuristic=nullHeuristic):
    "Search the node that has the lowest combined cost and heuristic first."
    "*** YOUR CODE HERE ***"
    util.raiseNotDefined()


# Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch
